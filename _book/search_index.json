[
["generalized-linear-models.html", "Chapter 7 Generalized Linear Models", " Chapter 7 Generalized Linear Models These notes are primarily from PSU STAT 504 which uses Alan Agresti’s Categorical Data Analysis (Agresti 2013). I also reviewed PSU STAT 501, DataCamp’s Generalized Linar Models in R, DataCamp’s Multiple and Logistic Regression, and **Interpretable machine learning*\"** (Molnar 2020). The linear regression model, \\(E(Y|X) = X \\beta\\), structured as \\(y_i = X_i \\beta + \\epsilon_i\\) where \\(X_i \\beta = \\mu_i\\), assumes the response is a linear function of the predictors and the residuals are independent random variables normally distributed with mean zero and constant variance, \\(\\epsilon \\sim N \\left(0, \\sigma^2 \\right)\\). This implies that given some set of predictors, the response is normally distributed about its expected value, \\(y_i \\sim N \\left(\\mu_i, \\sigma^2 \\right)\\). However, there are many situations where this assumption of normality fails. Generalized linear models (GLMs) are a generalization of the linear regression model that addresses non-normal response distributions. The response given a set of predictors will not have a normal distribution if its underlying data-generating process is binomial or multinomial (proportions), Poisson (counts), or exponential (time-to-event). In these situations a regular linear regression can predict proportions outside [0, 100] or counts or times that are negative. GLMs solve this problem by modeling a function of the expected value of \\(y\\), \\(f(E(Y|X)) = X \\beta\\). There are three components to a GLM: the random component is the probability distribution of the response variable (normal, binomial, Poisson, etc.); the systematic component is the explanatory variables \\(X\\beta\\); and the link function \\(\\eta\\) specifies the link between random and systematic components, converting the response range to \\([-\\infty, +\\infty]\\). Linear regression is thus a special case of GLM where link function is the identity function, \\(f(E(Y|X)) = E(Y|X)\\). For a logistic regression, where the data generating process is binomial, the link function is \\[f(E(Y|X)) = \\ln \\left( \\frac{E(Y|X)}{1 - E(Y|X)} \\right) = \\ln \\left( \\frac{\\pi}{1 - \\pi} \\right) = logit(\\pi)\\] where \\(\\pi\\) is the event probability. (As an aside, you have probably heard of the related “probit” regression. The probit regression link function is \\(f(E(Y|X)) = \\Phi^{-1}(E(Y|X)) = \\Phi^{-1}(\\pi)\\). The difference between the logistic and probit link function is theoretical, and the practical significance is slight. You can probably safely ignore probit). For a Poisson regression, the link function is \\[f(E(Y|X)) = \\ln (E(Y|X)) = \\ln(\\lambda)\\] where \\(\\lambda\\) is the expected event rate. For an exponential regression, the link function is \\[f(E(Y|X) = -E(Y|X) = -\\lambda\\] where \\(\\lambda\\) is the expected time to event. GLM uses maximum likelihood estimation (MLE) rather than ordinary least squares (OLS) to estimate the parameters, and thus relies on large-sample approximations. In R, specify a GLM just like an linear model, but with the glm() function, specifying the distribution with the family parameter. family = \"gaussian\": linear regression family = \"binomial\": logistic regression family = binomial(link = \"probit\"): probit regression family = \"poisson\": Poisson regression References "],
["logistic-regression.html", "7.1 Logistic Regression", " 7.1 Logistic Regression Logistic regression estimates the probability of a particular level of a categorical response variable given a set of predictors. The response levels can be binary, nominal (multiple categories), or ordinal (multiple levels). The binary logistic regression model is \\[y = logit(\\pi) = \\ln \\left( \\frac{\\pi}{1 - \\pi} \\right) = X \\beta\\] where \\(\\pi\\) is the event probability. The model predicts the log odds of the response variable. The maximum likelihood estimator maximizes the likelihood function \\[L(\\beta; y, X) = \\prod_{i=1}^n \\pi_i^{y_i}(1 - \\pi_i)^{(1-y_i)} = \\prod_{i=1}^n\\frac{\\exp(y_i X_i \\beta)}{1 + \\exp(X_i \\beta)}.\\] There is no closed-form solution, so GLM estimates coefficients with interatively reweighted least squares. Here is a case study to illustrate the points. Dataset donner contains observations of 45 members of the Donner party with response variable (surv) an explanatory variables age and sex. glimpse(donner) ## Observations: 45 ## Variables: 3 ## $ age &lt;dbl&gt; 23, 40, 40, 30, 28, 40, 45, 62, 65, 45, 25, 28, 28, 23, 22, 23... ## $ sex &lt;fct&gt; M, F, M, M, M, M, F, M, M, F, F, M, M, M, F, F, M, F, F, M, F,... ## $ surv &lt;fct&gt; Died, Lived, Lived, Died, Died, Died, Died, Died, Died, Died, ... Fit a logistic regression \\(SURV = SEX + AGE + SEX : AGE\\). m &lt;- glm(surv ~ sex*age, data = donner, family = binomial(link = logit)) summary(m) ## ## Call: ## glm(formula = surv ~ sex * age, family = binomial(link = logit), ## data = donner) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.2279 -0.9388 -0.5550 0.7794 1.6998 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 7.24638 3.20517 2.261 0.0238 * ## sexM -6.92805 3.39887 -2.038 0.0415 * ## age -0.19407 0.08742 -2.220 0.0264 * ## sexM:age 0.16160 0.09426 1.714 0.0865 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 61.827 on 44 degrees of freedom ## Residual deviance: 47.346 on 41 degrees of freedom ## AIC: 55.346 ## ## Number of Fisher Scoring iterations: 5 The “z value” in the Coefficients table is the Wald z statistic, \\(z = \\hat{\\beta} / SE(\\hat{\\beta})\\), which if squared is the Wald chi-squared statistic, \\(z^2\\). The p.value is the area to the right of \\(z^2\\) in the \\(\\chi_1^2\\) density curve: m %&gt;% tidy() %&gt;% mutate( z = estimate / std.error, p_z2 = pchisq(z^2, df = 1, lower.tail = FALSE) ) %&gt;% select(term, estimate, z, p_z2) ## # A tibble: 4 x 4 ## term estimate z p_z2 ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 7.25 2.26 0.0238 ## 2 sexM -6.93 -2.04 0.0415 ## 3 age -0.194 -2.22 0.0264 ## 4 sexM:age 0.162 1.71 0.0865 Below the Coefficients table, the “dispersion parameter” refers to overdispersion, a common issue with GLM. For a logistic regression, the response variable should be distributed \\(y_i \\sim Bin(n_i, \\pi_i)\\) with \\(\\mu_i = n_i \\pi_i\\) and \\(\\sigma^2 = \\pi (1 - \\pi)\\). Overdispersion means the data shows evidence of variance greater than \\(\\sigma^2\\). “Fisher scoring” is a method for ML estimation. Logistic regression uses an iterative procedure to fit the model, so this section indicates whether the algorithm converged. The null deviance is the likelihood ratio \\(G^2 = 61.827\\) of the intercept-only model. The residual deviance is the likelihood ratio \\(G^2 = 47.346\\) after including all model covariates. \\(G^2\\) is large, so reject the null hypothesis of no age and sex effects. The ANOVA table shows the change in deviance from adding each variable successively to the model. anova(m) ## Analysis of Deviance Table ## ## Model: binomial, link: logit ## ## Response: surv ## ## Terms added sequentially (first to last) ## ## ## Df Deviance Resid. Df Resid. Dev ## NULL 44 61.827 ## sex 1 4.5403 43 57.286 ## age 1 6.0300 42 51.256 ## sex:age 1 3.9099 41 47.346 glance(m) ## # A tibble: 1 x 7 ## null.deviance df.null logLik AIC BIC deviance df.residual ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 61.8 44 -23.7 55.3 62.6 47.3 41 Plug in values to interpret the model. The log odds of a 24 year-old female surviving is \\(\\hat{y} = 2.59\\). The log odds of a 24 year-old male surviving is \\(\\hat{y} = -0.46\\). coef(m)[&quot;(Intercept)&quot;] + coef(m)[&quot;sexM&quot;]*0 + coef(m)[&quot;age&quot;]*24 + coef(m)[&quot;sexM:age&quot;]*0*24 coef(m)[&quot;(Intercept)&quot;] + coef(m)[&quot;sexM&quot;]*1 + coef(m)[&quot;age&quot;]*24 + coef(m)[&quot;sexM:age&quot;]*1*24 # Or use predict() (lo_f &lt;- predict(m, newdata = data.frame(sex = &quot;F&quot;, age = 24))) (lo_m &lt;- predict(m, newdata = data.frame(sex = &quot;M&quot;, age = 24))) Log odds are not easy to interpet. Exponentiate the log odds to get the odds. \\[odds(\\hat{y}) = \\exp (\\hat{y}) = \\frac{\\pi}{1 - \\pi}.\\] The odds of a 24 year-old female surviving is \\(\\exp(\\hat{y}) = 13.31\\). The odds of a 24 year-old male surviving is \\(\\exp(\\hat{y}) = 0.63\\). exp(lo_f) exp(lo_m) Solve for \\(\\pi\\) to get the probability. \\[\\pi = \\frac{\\exp (\\hat{y})}{1 + \\exp (\\hat{y})}\\] The probability of a 24 year-old female surviving is \\(\\pi = 0.93\\). The probability of a female of average age surviving is \\(\\pi = 0.39\\). The predict() function for a logistic model returns log-odds, but can also return \\(\\pi\\) by specifying parameter type = \"response\". exp(lo_f) / (1 + exp(lo_f)) exp(lo_m) / (1 + exp(lo_m)) # Or use predict(..., type = &quot;response&quot;) (p_f &lt;- predict(m, newdata = data.frame(sex = &quot;F&quot;, age =24), type = &quot;response&quot;)) (p_m &lt;- predict(m, newdata = data.frame(sex = &quot;M&quot;, age =24), type = &quot;response&quot;)) Interpret the coefficient estimates using the odds ratio, the ratio of the odds before and after an increment to the predictors. The odds ratio is how much the odds would be multiplied after a \\(\\delta = X_1 - X_0\\) unit increase in \\(X\\). \\[\\theta = \\frac{\\pi / (1 - \\pi) |_{X = X_1}}{\\pi / (1 - \\pi) |_{X = X_0}} = \\frac{\\exp (X_1 \\hat{\\beta})}{\\exp (X_0 \\hat{\\beta})} = \\exp ((X_1-X_0) \\hat{\\beta}) = \\exp (\\delta \\hat{\\beta})\\] The odds of a female surviving are multiplied by a factor of \\(\\exp(1 \\cdot (-0.19)) = 0.824\\) per additional year of age. The odds of a male surviving are multiplied by a factor of \\(\\exp(1 \\cdot (-0.161-0.19)) = 0.968\\) per additional year of age. exp(1 * (coef(m)[&quot;age&quot;] + 0*coef(m)[&quot;sexM:age&quot;])) # female exp(1 * (coef(m)[&quot;age&quot;] + 1*coef(m)[&quot;sexM:age&quot;])) # male oddsratio::or_glm() calculates the odds ratio from an increment in the predictor values. oddsratio::or_glm(donner, m, incr = list(age = 1)) ## # A tibble: 3 x 5 ## predictor oddsratio `CI_low (2.5)` `CI_high (97.5)` increment ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 sexM 0.001 0 0.243 Indicator variable ## 2 age 0.824 0.652 0.945 1 ## 3 sexM:age 1.18 1.00 1.50 Indicator variable The predicted values can also be expressed as the probabilities \\(\\pi\\). This produces the familiar signmoidal shape of the binary relationship. augment(m, type.predict = &quot;response&quot;) %&gt;% ggplot(aes(x = age)) + geom_point(aes(y = surv)) + geom_line(aes(y = .fitted+1)) + theme_mf() + labs(x = &quot;AGE&quot;, y = &quot;Probability of SURVIVE&quot;, title = &quot;Binary Fitted Line Plot&quot;) Evaluate a logistic regression using a Gain curve or ROC curve. In the gain curve, the x-axis is the fraction of items seen when sorted by the predicted value, and the y-axis is the cumulative summed true outcome. The “wizard” curve is the gain curve when the data is sorted by the true outcome. If the model’s gain curve is close to the wizard curve, then the model predicted the response variable well. The grey area is the “gain” over a random prediction. 20 of the 45 members of the Donner party survived. The gain curve encountered 10 survivors (50%) within the first 12 observations (27%). It encountered all 20 survivors on the 37th observation. The bottom of the grey area is the outcome of a random model. Only half the survivors would be observed within 50% of the observations. The top of the grey area is the outcome of the perfect model, the “wizard curve”. Half the survivors would be observed in 10/45=22% of the observations. options(yardstick.event_first = FALSE) # set the second level as success augment(m, type.predict = &quot;response&quot;) %&gt;% yardstick::gain_curve(surv, .fitted) %&gt;% autoplot() + labs(title = &quot;Gain Curve&quot;) The ROC (Receiver Operating Characteristics) curve plots sensitivity vs specificity at different cut-off values for the probability, ranging cut-off from 0 to 1. options(yardstick.event_first = FALSE) # set the second level as success augment(m, type.predict = &quot;response&quot;) %&gt;% yardstick::roc_curve(surv, .fitted) %&gt;% autoplot() + labs(title = &quot;ROC Curve&quot;) "],
["multinomial-logistic-regression.html", "7.2 Multinomial Logistic Regression", " 7.2 Multinomial Logistic Regression The following notes rely on the [PSU STAT 504 course notes](https://online.stat.psu.edu/stat504/node/171/. Multinomial logistic regression models the odds the multinomial response variable \\(Y \\sim Mult(n, \\pi)\\) is in level \\(j\\) relative to baseline category \\(j^*\\) for all pairs of categories as a function of \\(k\\) explanatory variables, \\(X = (X_1, X_2, ... X_k)\\). \\[\\log \\left( \\frac{\\pi_{ij}}{\\pi_{ij^*}} \\right) = x_i^T \\beta_j, \\hspace{5mm} j \\ne j^2\\] Interpet the \\(k^{th}\\) element of \\(\\beta_j\\) as the increase in log-odds of falling a response in category \\(j\\) relative to category \\(j^*\\) resulting from a one-unit increase in the \\(k^{th}\\) predictor term, holding the other terms constant. Multinomial model is a type of GLM. Here is an example using multinomial logistic regression. A researcher classified the stomach contents of \\(n = 219\\) alligators according to \\(r = 5\\) categories (fish, Inv., Rept, Bird, Other) as a function of covariates Lake, Sex, and Size.. gator_dat &lt;- tribble( ~profile, ~Gender, ~Size, ~Lake, ~Fish, ~Invertebrate, ~Reptile, ~Bird, ~Other, &quot;1&quot;, &quot;f&quot;, &quot;&lt;2.3&quot;, &quot;george&quot;, 3, 9, 1, 0, 1, &quot;2&quot;, &quot;m&quot;, &quot;&lt;2.3&quot;, &quot;george&quot;, 13, 10, 0, 2, 2, &quot;3&quot;, &quot;f&quot;, &quot;&gt;2.3&quot;, &quot;george&quot;, 8, 1, 0, 0, 1, &quot;4&quot;, &quot;m&quot;, &quot;&gt;2.3&quot;, &quot;george&quot;, 9, 0, 0, 1, 2, &quot;5&quot;, &quot;f&quot;, &quot;&lt;2.3&quot;, &quot;hancock&quot;, 16, 3, 2, 2, 3, &quot;6&quot;, &quot;m&quot;, &quot;&lt;2.3&quot;, &quot;hancock&quot;, 7, 1, 0, 0, 5, &quot;7&quot;, &quot;f&quot;, &quot;&gt;2.3&quot;, &quot;hancock&quot;, 3, 0, 1, 2, 3, &quot;8&quot;, &quot;m&quot;, &quot;&gt;2.3&quot;, &quot;hancock&quot;, 4, 0, 0, 1, 2, &quot;9&quot;, &quot;f&quot;, &quot;&lt;2.3&quot;, &quot;oklawaha&quot;, 3, 9, 1, 0, 2, &quot;10&quot;, &quot;m&quot;, &quot;&lt;2.3&quot;, &quot;oklawaha&quot;, 2, 2, 0, 0, 1, &quot;11&quot;, &quot;f&quot;, &quot;&gt;2.3&quot;, &quot;oklawaha&quot;, 0, 1, 0, 1, 0, &quot;12&quot;, &quot;m&quot;, &quot;&gt;2.3&quot;, &quot;oklawaha&quot;, 13, 7, 6, 0, 0, &quot;13&quot;, &quot;f&quot;, &quot;&lt;2.3&quot;, &quot;trafford&quot;, 2, 4, 1, 1, 4, &quot;14&quot;, &quot;m&quot;, &quot;&lt;2.3&quot;, &quot;trafford&quot;, 3, 7, 1, 0, 1, &quot;15&quot;, &quot;f&quot;, &quot;&gt;2.3&quot;, &quot;trafford&quot;, 0, 1, 0, 0, 0, &quot;16&quot;, &quot;m&quot;, &quot;&gt;2.3&quot;, &quot;trafford&quot;, 8, 6, 6, 3, 5 ) gator_dat &lt;- gator_dat %&gt;% mutate( Gender = as_factor(Gender), Lake = fct_relevel(Lake, &quot;hancock&quot;), Size = as_factor(Size) ) There are 4 equations to estimate: \\[\\log \\left( \\frac{\\pi_j} {\\pi_{j^*}} \\right) = \\beta X\\] where \\(\\pi_{j^*}\\) is the probability of fish, the baseline category. Run a multivariate logistic regression model with VGAM::vglm(). library(VGAM) ## Warning: package &#39;VGAM&#39; was built under R version 3.6.2 vglm() fits 4 logit models. gator_vglm &lt;- vglm( cbind(Bird,Invertebrate,Reptile,Other,Fish) ~ Lake + Size + Gender, data = gator_dat, family = multinomial ) summary(gator_vglm) ## ## Call: ## vglm(formula = cbind(Bird, Invertebrate, Reptile, Other, Fish) ~ ## Lake + Size + Gender, family = multinomial, data = gator_dat) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## log(mu[,1]/mu[,5]) -1.1985 -0.5478 -0.22421 0.3678 3.478 ## log(mu[,2]/mu[,5]) -1.3218 -0.4611 0.01054 0.3810 1.866 ## log(mu[,3]/mu[,5]) -0.7033 -0.5751 -0.35511 0.2610 2.064 ## log(mu[,4]/mu[,5]) -1.6945 -0.2893 -0.10807 1.1236 1.367 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept):1 -1.8568 0.5813 -3.195 0.001400 ** ## (Intercept):2 -1.6115 0.5508 -2.926 0.003435 ** ## (Intercept):3 -2.2866 0.6566 -3.483 0.000497 *** ## (Intercept):4 -0.6642 0.3802 -1.747 0.080639 . ## Lakegeorge:1 -0.5753 0.7952 -0.723 0.469429 ## Lakegeorge:2 1.7805 0.6232 2.857 0.004277 ** ## Lakegeorge:3 -1.1295 1.1928 -0.947 0.343687 ## Lakegeorge:4 -0.7666 0.5686 -1.348 0.177563 ## Lakeoklawaha:1 -1.1256 1.1923 -0.944 0.345132 ## Lakeoklawaha:2 2.6937 0.6693 4.025 5.70e-05 *** ## Lakeoklawaha:3 1.4008 0.8105 1.728 0.083926 . ## Lakeoklawaha:4 -0.7405 0.7421 -0.998 0.318372 ## Laketrafford:1 0.6617 0.8461 0.782 0.434145 ## Laketrafford:2 2.9363 0.6874 4.272 1.94e-05 *** ## Laketrafford:3 1.9316 0.8253 2.340 0.019263 * ## Laketrafford:4 0.7912 0.5879 1.346 0.178400 ## Size&gt;2.3:1 0.7302 0.6523 1.120 0.262918 ## Size&gt;2.3:2 -1.3363 0.4112 -3.250 0.001155 ** ## Size&gt;2.3:3 0.5570 0.6466 0.861 0.388977 ## Size&gt;2.3:4 -0.2906 0.4599 -0.632 0.527515 ## Genderm:1 -0.6064 0.6888 -0.880 0.378666 ## Genderm:2 -0.4630 0.3955 -1.171 0.241796 ## Genderm:3 -0.6276 0.6853 -0.916 0.359785 ## Genderm:4 -0.2526 0.4663 -0.542 0.588100 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Names of linear predictors: log(mu[,1]/mu[,5]), log(mu[,2]/mu[,5]), ## log(mu[,3]/mu[,5]), log(mu[,4]/mu[,5]) ## ## Residual deviance: 50.2637 on 40 degrees of freedom ## ## Log-likelihood: -73.3221 on 40 degrees of freedom ## ## Number of Fisher scoring iterations: 5 ## ## No Hauck-Donner effect found in any of the estimates ## ## ## Reference group is level 5 of the response The residual deviance is 50.2637 on 40 degrees of freedom. Residual deviance tests the current model fit versus the saturated model. The saturated model, which fits a separate multinomial distribution to each of the 16 profiles (unique combinations of lake, sex and size), has 16 × 4 = 64 parameters. The current model has an intercept, three lake coefficients, one sex coefficient and one size coefficient for each of the four logit equations, for a total of 24 parameters. Therefore, the overall fit statistics have 64 − 24 = 40 degrees of freedom. E &lt;- data.frame(fitted(gator_vglm) * rowSums(gator_dat[, 5:9])) O &lt;- gator_dat %&gt;% select(Bird, Invertebrate, Reptile, Other, Fish) + .000001 (g2 &lt;- 2 * sum(O * log(O / E))) ## [1] 50.26321 indicates the model fits okay, but not great. The Residual Deviance of 50.26 with 40 df from the table above output is reasonable, with p-value of 0.1282 and the statistics/df is close to 1 that is 1.256. "],
["ordinal-logistic-regression.html", "7.3 Ordinal Logistic Regression", " 7.3 Ordinal Logistic Regression These notes rely on UVA and PSU STAT 504 class notes. The ordinal logistic regression model is \\[logit[P(Y \\le j)] = \\log \\left[ \\frac{P(Y \\le j)}{P(Y \\gt j)} \\right] = \\alpha_j - \\beta X, \\hspace{5mm} j \\in [1, J-1]\\] where \\(j \\in [1, J-1]\\) are the levels of the ordinal outcome variable \\(Y\\). The proportional odds model assumes there is a common set of slope parameters \\(\\beta\\) for the predictors. The ordinal outcomes are distinguished by the \\(J-1\\) intercepts \\(\\alpha_j\\). The benchmark level is \\(J\\). Technically, the model could be written \\(logit[P(Y \\le j)] = \\alpha_j + \\zeta X\\), replacing beta with zeta because the model fits \\(\\alpha_j - \\beta X\\) instead of \\(\\alpha_j + \\beta X\\). Suppose you want to model the probability a respondent holds a political ideology [“Socialist”, “Liberal”, “Moderate”, “Conservative”, “Libertarian”] given their party affiliation [“Republican”, “Democrat”]. table(ideology) ## ideo ## party Socialist Liberal Moderate Conservative Libertarian ## Rep 30 46 148 84 99 ## Dem 80 81 171 41 55 Fit a proportional odds logistic regression. pom &lt;- MASS::polr(ideo ~ party, data = ideology) summary(pom) ## Call: ## MASS::polr(formula = ideo ~ party, data = ideology) ## ## Coefficients: ## Value Std. Error t value ## partyDem -0.9745 0.1292 -7.545 ## ## Intercepts: ## Value Std. Error t value ## Socialist|Liberal -2.4690 0.1318 -18.7363 ## Liberal|Moderate -1.4745 0.1090 -13.5314 ## Moderate|Conservative 0.2371 0.0942 2.5165 ## Conservative|Libertarian 1.0695 0.1039 10.2923 ## ## Residual Deviance: 2474.985 ## AIC: 2484.985 The log-odds a Democrat identifies as Socialist vs &gt;Socialist, or equivalently, the log-odds a Democrat identifies as &lt;=Socialist vs &gt;=Liberal is \\[logit[P(Y \\le 1)] = -2.4690 - (-0.9745)(1) = -1.4945\\] which translates into an odds of \\[odds(Y&lt;=1) = exp(logit[P(Y \\le 1)]) = \\frac{exp(-2.469)}{exp(-0.9745)} = 0.2244\\] It is the same for Republicans, except multiply the slope coefficient by zero. \\[logit[P(Y \\le 1)] = -2.4690 - (-0.9745)(0) = -2.4690\\] \\[odds(Y&lt;=1) = exp(logit[P(Y \\le 1)]) = \\frac{exp(-2.469)}{exp(0)} = -2.4690\\] The “proportional odds” part of the proportional odds model is that the ratios of the \\(J - 1\\) odds are identical for each level of the predictors. The numerators are always the same, and the denominators differ only by the exponent of the slope coefficient, \\(-0.9745\\). For all \\(j \\in [1, J-1]\\), the odds a Democrat’s ideology is \\(\\le j\\) vs \\(&gt;j\\) is \\(exp(-0.9745) = 2.6498\\) times that of a Republican’s odds. You can translate the cumulative odds to cumulative probabilities by taking the ratio \\(\\pi = exp(odds) / (1 + exp(odds))\\). The probability a Democrat identifies as &lt;=Socialist vs &gt;Socialist is \\[P(Y \\le 1) = \\frac{exp(-1.4945)} {(1 + exp(-1.4945))} = 0.183.\\] The individual probabilities are just the successive differences in the cumulative probabilities. The log odds a Democrat identifies as &lt;=Liberal vs &gt;Liberal are \\(logit[P(Y \\lt 2)] = -1.4745 - (-0.9745)(1) = -0.500\\), which translates into a probability of \\(P(Y \\le 2) = exp(-0.5) / (1 + exp(-0.5)) = 0.378\\). The probability a Democrat identifies as Liberal is the difference in adjacent cumulative probabilities, \\(P(Y \\le 2) - P(Y \\le 1) = 0.378 = 0.183 = 0.194\\). This is how the model to predicts the level probabilities. x &lt;- predict(pom, newdata = data.frame(party = c(&quot;Dem&quot;, &quot;Rep&quot;)), type = &quot;probs&quot;) rownames(x) &lt;- c(&quot;Dem&quot;, &quot;Rep&quot;) print(x) ## Socialist Liberal Moderate Conservative Libertarian ## Dem 0.18325048 0.1942837 0.3930552 0.1147559 0.1146547 ## Rep 0.07806044 0.1081923 0.3727521 0.1855036 0.2554916 Always check the assumption of proportional odds. One way to do this is by comparing the proportional odds model with a multinomial logit model, also called an unconstrained baseline logit model. The multinomial logit model models unordered responses and fits a slope to each level of the \\(J – 1\\) responses. The proportional odds model is nested in the multinomial model, so you can use a likelihood ratio test to see if the models are statistically different. mlm &lt;- nnet::multinom(ideo ~ party, data = ideology) ## # weights: 15 (8 variable) ## initial value 1343.880657 ## iter 10 value 1239.866743 ## final value 1235.648615 ## converged Calculate the difference in the deviance test statistics \\(D = -2 loglik(\\beta)\\). G &lt;- -2 * (logLik(pom)[1] - logLik(mlm)[1]) pchisq(G, df = length(pom$zeta) - 1, lower.tail = FALSE) ## [1] 0.2972241 The p-value is high, so do not reject the null hypothesis that the proportional odds model fits differently than the more complex multinomial logit model. "],
["poisson-regression.html", "7.4 Poisson Regression", " 7.4 Poisson Regression Poisson models count data, like “traffic tickets per day”, or “website hits per day”. The response is an expected rate or intensity. For count data, specify the generalized model, this time with family = poisson or family = quasipoisson. Recall that the probability of achieving a count \\(y\\) when the expected rate is \\(\\lambda\\) is distributed \\[P(Y = y|\\lambda) = \\frac{e^{-\\lambda} \\lambda^y}{y!}.\\] The poisson regression model is \\[\\lambda = \\exp(X \\beta).\\] You can solve this for \\(y\\) to get \\[y = X\\beta = \\ln(\\lambda).\\] That is, the model predicts the log of the response rate. For a sample of size n, the likelihood function is \\[L(\\beta; y, X) = \\prod_{i=1}^n \\frac{e^{-\\exp({X_i\\beta})}\\exp({X_i\\beta})^{y_i}}{y_i!}.\\] The log-likelihood is \\[l(\\beta) = \\sum_{i=1}^n (y_i X_i \\beta - \\sum_{i=1}^n\\exp(X_i\\beta) - \\sum_{i=1}^n\\log(y_i!).\\] Maximizing the log-likelihood has no closed-form solution, so the coefficient estimates are found through interatively reweighted least squares. Poisson processes assume the variance of the response variable equals its mean. “Equals” means the mean and variance are of a similar order of magnitude. If that assumption does not hold, use the quasi-poisson. Use Poisson regression for large datasets. If the predicted counts are much greater than zero (&gt;30), the linear regression will work fine. Whereas RMSE is not useful for logistic models, it is a good metric in Poisson. Dataset fire contains response variable injuries counting the number of injuries during the month and one explanatory variable, the month mo. fire &lt;- read_csv(file = &quot;C:/Users/mpfol/OneDrive/Documents/Data Science/Data/CivilInjury_0.csv&quot;) ## Parsed with column specification: ## cols( ## ID = col_double(), ## `Injury Date` = col_datetime(format = &quot;&quot;), ## `Total Injuries` = col_double() ## ) fire &lt;- fire %&gt;% mutate(mo = as.POSIXlt(`Injury Date`)$mon + 1) %&gt;% rename(dt = `Injury Date`, injuries = `Total Injuries`) str(fire) ## Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 300 obs. of 4 variables: ## $ ID : num 1 2 3 4 5 6 7 8 9 10 ... ## $ dt : POSIXct, format: &quot;2005-01-10&quot; &quot;2005-01-11&quot; ... ## $ injuries: num 1 1 1 5 2 1 1 1 1 1 ... ## $ mo : num 1 1 1 1 1 1 2 2 2 4 ... In a situation like this where there the relationship is bivariate, start with a visualization. ggplot(fire, aes(x = mo, y = injuries)) + geom_jitter() + geom_smooth(method = &quot;glm&quot;, method.args = list(family = &quot;poisson&quot;)) + labs(title = &quot;Injuries by Month&quot;) Fit a poisson regression in R using glm(formula, data, family = poisson). But first, check whether the mean and variance of injuries are the same magnitude? If not, then use family = quasipoisson. mean(fire$injuries) ## [1] 1.36 var(fire$injuries) ## [1] 1.020468 They are of the same magnitude, so fit the regression with family = poisson. m2 &lt;- glm(injuries ~ mo, family = poisson, data = fire) summary(m2) ## ## Call: ## glm(formula = injuries ~ mo, family = poisson, data = fire) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.3987 -0.3473 -0.3034 -0.2502 4.3185 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.22805 0.10482 2.176 0.0296 * ## mo 0.01215 0.01397 0.870 0.3844 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 139.87 on 299 degrees of freedom ## Residual deviance: 139.11 on 298 degrees of freedom ## AIC: 792.08 ## ## Number of Fisher Scoring iterations: 5 The predicted value \\(\\hat{y}\\) is the estimated log of the response variable, \\[\\hat{y} = X \\hat{\\beta} = \\ln (\\lambda).\\] Suppose mo is January (mo = ), then the log ofinjuries` is \\(\\hat{y} = 0.323787\\). Or, more intuitively, the expected count of injuries is \\(\\exp(0.323787) = 1.38\\) predict(m2, newdata = data.frame(mo=1)) ## 1 ## 0.2401999 predict(m2, newdata = data.frame(mo=1), type = &quot;response&quot;) ## 1 ## 1.271503 Here is a plot of the predicted counts in red. augment(m2, type.predict = &quot;response&quot;) %&gt;% ggplot(aes(x = mo, y = injuries)) + geom_point() + geom_point(aes(y = .fitted), color = &quot;red&quot;) + scale_y_continuous(limits = c(0, NA)) + labs(x = &quot;Month&quot;, y = &quot;Injuries&quot;, title = &quot;Poisson Fitted Line Plot&quot;) Evaluate a logistic model fit with an analysis of deviance. (perf &lt;- glance(m2)) ## # A tibble: 1 x 7 ## null.deviance df.null logLik AIC BIC deviance df.residual ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 140. 299 -394. 792. 799. 139. 298 (pseudoR2 &lt;- 1 - perf$deviance / perf$null.deviance) ## [1] 0.005413723 The deviance of the null model (no regressors) is 139.9. The deviance of the full model is 132.2. The psuedo-R2 is very low at .05. How about the RMSE? RMSE(pred = predict(m2, type = &quot;response&quot;), obs = fire$injuries) ## [1] 1.006791 The average prediction error is about 0.99. That’s almost as much as the variance of injuries - i.e., just predicting the mean of injuries would be almost as good! Use the GainCurvePlot() function to plot the gain curve. augment(m2, type.predict = &quot;response&quot;) %&gt;% ggplot(aes(x = injuries, y = .fitted)) + geom_point() + geom_smooth(method =&quot;lm&quot;) + labs(x = &quot;Actual&quot;, y = &quot;Predicted&quot;, title = &quot;Poisson Fitted vs Actual&quot;) augment(m2) %&gt;% data.frame() %&gt;% GainCurvePlot(xvar = &quot;.fitted&quot;, truthVar = &quot;injuries&quot;, title = &quot;Poisson Model&quot;) It seems that mo was a poor predictor of injuries. "]
]
